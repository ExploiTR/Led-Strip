package app.exploitr.led;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.drawable.DrawableCompat;

import android.app.Activity;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.net.DhcpInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.text.format.Formatter;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import org.apache.commons.net.telnet.TelnetClient;

import java.io.IOException;

public class MainActivity extends AppCompatActivity {

	private boolean connected = false;

	Button status;
	TelnetClient telnet;
	WifiManager manager;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		status = findViewById(R.id.status);
		telnet = new TelnetClient();
		manager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);

		new Thread(() -> {
			try {
				startConnectionMaintenance();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}).start();
	}

	private void startConnectionMaintenance() throws InterruptedException {
		DhcpInfo _dh_cp = manager.getDhcpInfo();
		String address = Formatter.formatIpAddress(_dh_cp.gateway);
		if (!telnet.isAvailable()) {
			runOnUiThread(() -> setStatus(Color.rgb(255, 0, 0)));
			try {
				telnet.connect(address, 2020);
				connected = true;
				runOnUiThread(() -> setStatus(Color.rgb(0, 255, 0)));
			} catch (IOException e) {
				connected = false;
				runOnUiThread(() -> setStatus(Color.rgb(255, 0, 0)));
				e.printStackTrace();
			}
		}

		System.out.println("Gateway : " + address);
		Thread.sleep(500);
		startConnectionMaintenance();
	}

	private void setStatus(int rgb) {
		Drawable drawable = status.getBackground();
		drawable = DrawableCompat.wrap(drawable);
		DrawableCompat.setTint(drawable, rgb);
	}

	@Override
	protected void onDestroy() {
		try {
			telnet.disconnect();
		} catch (IOException e) {
			e.printStackTrace();
		}
		super.onDestroy();
	}

	void sC(Object what) {
		if (connected) {
			new Thread(() -> {
				try {
					telnet.getOutputStream().write((what.toString() + '\r').getBytes());
					telnet.getOutputStream().flush();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}).start();
		} else
			Toast.makeText(this, "Connection not available", Toast.LENGTH_SHORT).show();
	}

	public void spd_up(View view) {
		sC(0);
	}

	public void spd_down(View view) {
		sC(1);
	}

	public void off(View view) {
		sC(2);
	}

	public void on(View view) {
		sC(3);
	}

	public void red_all(View view) {
		sC(4);
	}

	public void grn_all(View view) {
		sC(5);
	}

	public void blu_all(View view) {
		sC(6);
	}

	public void white_all(View view) {
		sC(7);
	}

	public void red_1(View view) {
		sC(8);
	}

	public void grn_1(View view) {
		sC(9);
	}

	public void blu_1(View view) {
		sC(10);
	}

	public void m1(View view) {
		sC(11);
	}

	public void red_2(View view) {
		sC(12);
	}

	public void grn_2(View view) {
		sC(13);
	}

	public void blu_2(View view) {
		sC(14);
	}

	public void m2(View view) {
		sC(15);
	}

	public void red_3(View view) {
		sC(16);
	}

	public void grn_3(View view) {
		sC(17);
	}

	public void blu_3(View view) {
		sC(18);
	}

	public void m3(View view) {
		sC(19);
	}

	public void red_4(View view) {
		sC(20);
	}

	public void grn_4(View view) {
		sC(21);
	}

	public void blu_4(View view) {
		sC(22);
	}

	public void m4(View view) {
		sC(23);
	}
}
